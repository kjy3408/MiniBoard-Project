<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.mini.board.miniprojectBoard.repository.ReadBoardRepository">

	<resultMap type="com.mini.board.miniprojectBoard.entity.Comment" id="CommentMap">
		<result property="commentId" column="comment_id"/>
		<result property="comment" column="comment"/>
		<result property="commentDate" column="comment_date"/>
		<result property="modifyCommentFlag" column="modify_comment_flag"/>
		<association property="user" resultMap="UserMap" />
		<association property="board" resultMap="BoardMap" />
	</resultMap>
	
	<resultMap type="com.mini.board.miniprojectBoard.entity.Board" id="BoardMap">
		<result property="boardId" column="board_id"/>
		<result property="boardTitle" column="board_title"/>
		<result property="boardContent" column="board_content"/>
		<result property="boardDate" column="board_date"/>
		<result property="boardViews" column="board_views"/>
		
		<association property="user" resultMap="UserMap" />
	</resultMap>
	
	<resultMap type="com.mini.board.miniprojectBoard.entity.User" id="UserMap">
		<id property="userId" column="user_id" />
		<result property="username" column="username"/>
<!-- 		<result property="password" column="password"/> -->
		<result property="nickname" column="nickname"/>
<!-- 		<collection property="authorities" javaType="list" resultMap="AuthorityMap" /> -->
	</resultMap>
	
	
	<select id="readBoard" parameterType="Integer" resultMap="BoardMap">
		SELECT
			*
		FROM
			board_tb bt
			LEFT OUTER JOIN user_tb ut ON (bt.user_id = ut.user_id)
		WHERE
			board_id = #{boardId}
	</select>
	
	<update id="commentCountUp" parameterType="Integer">
		UPDATE
			board_tb
		SET
			comment_count = (SELECT 
								COUNT(*) 
							FROM 
								comment_tb 
							WHERE 
								board_id = #{boardId})
		WHERE
			board_id = #{boardId}
	</update>
	
	<insert id="registerComment" parameterType="hashmap">
		INSERT INTO comment_tb
		VALUES (0, #{comment}, #{userId}, #{boardId}, DATE_FORMAT(now(), '%Y-%m-%d'), false)
	</insert>
	
	<select id="getComment" parameterType="Integer" resultMap="CommentMap">
		SELECT
			ct.comment_id,
		    ct.comment,
		    ct.comment_date,
		    ct.modify_comment_flag,
		    
		    ut.user_id,
		    ut.username,
		    ut.nickname,
		    
		    bt.board_id,
		    bt.board_title,
		    bt.board_content,
		    bt.board_date,
		    bt.board_views
		FROM
			comment_tb ct
		    LEFT OUTER JOIN board_tb bt ON (ct.board_id = bt.board_id)
		    LEFT OUTER JOIN user_tb ut ON (ct.user_id = ut.user_id)
		WHERE
			bt.board_id = #{boardId}
		ORDER BY
			ct.comment_id DESC
	</select>
	
	<delete id="deleteComment" parameterType="Integer">
		DELETE
		FROM
			comment_tb
		WHERE
			comment_id = #{commentId}
	</delete>
	
	<update id="commentCountDown">
		UPDATE
			board_tb
		FROM
			comment_count = comment_count - 1
		WHERE
			board_id = board_id
	</update>
	
	<update id="modifyComment" parameterType="hashmap">
		UPDATE 
			comment_tb
		SET 
			comment = #{modifyComment}, modify_comment_flag = true
		WHERE 
			comment_id = #{commentId}
		AND board_id = #{boardId}
	</update>
	
	<insert id="registerReplyComment" parameterType="hashmap">
		INSERT INTO replycomment_tb
		VALUES (0, #{replyComment}, #{commentId}, #{userId}, #{boardId}, DATE_FORMAT(now(), '%Y-%m-%d'))
	</insert>
	
	<select id="getReplyComment" parameterType="Integer" resultType="com.mini.board.miniprojectBoard.dto.board.response.ReplyCommentResponseDto" >
		SELECT
			rt.replycomment_id AS replyCommentId,
		    rt.replycomment AS replyComment,
		    rt.replycomment_date AS replyCommentDate,
		    
		    ct.comment_id AS commentId,
		    ct.comment AS comment,
		    
		    bt.board_id AS boardId,
		    bt.board_title AS boardTitle,
		    bt.board_content AS boardContent,
		    bt.board_date AS boardDate,
		    
		    ut.user_id AS userId,
		    ut.username AS username,
		    ut.nickname AS nickname
		FROM
			replycomment_tb rt
		    LEFT OUTER JOIN comment_tb ct ON (rt.comment_id = ct.comment_id)
		    LEFT OUTER JOIN board_tb bt ON (rt.board_id = bt.board_id)
		    LEFT OUTER JOIN user_tb ut ON (rt.user_id = ut.user_id)
		WHERE
			rt.comment_id = #{getCommentId}
		ORDER BY
			rt.replycomment_id DESC
	</select>
	
	<delete id="deleteReplyComment" parameterType="Integer">
		DELETE
		FROM
			replycomment_tb
		WHERE
			replycomment_id = #{replyCommentId}
	</delete>
	
	<insert id="addLike" parameterType="hashmap" >
		INSERT INTO board_like_tb
		VALUES (0, #{boardId}, #{userId})
	</insert>
	
	<select id="addLikeFlag" parameterType="hashmap" resultType="hashmap">
		SELECT
			board_like_id,
			board_id,
			user_id	
		FROM
			board_like_tb
		WHERE
			board_id = #{boardId}
		AND user_id = #{userId}
	</select>
	
	<delete id="disLike" parameterType="hashmap">
		DELETE
		FROM
			board_like_tb
		WHERE
			board_id = #{boardId}
		AND user_id = #{userId}
	</delete>
	
	<update id="addLikeCountChange" parameterType="hashmap">
		UPDATE
			board_tb
		SET
			like_count = ( SELECT
								COUNT(*)
							FROM
								board_like_tb
							WHERE
								board_id = #{boardId})
		WHERE
			board_id = #{boardId}
	</update>
</mapper>